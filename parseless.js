var fs = require('fs');
var zip = new require('node-zip')();

/*
|--------------------------------------------------------------------------
| Create temp Folders if they don't exist
|--------------------------------------------------------------------------
*/
var directoryError = function(project, type) {
    if (project === null || type === null) return false;

    if (!fs.existsSync('./files/temp/')) {
        fs.mkdirSync('./files/temp/');
    }

    if (!fs.existsSync('./files/downloads/')) {
        fs.mkdirSync('./files/downloads/');
    }

    if (!fs.existsSync('./files/temp/' + type + '/')) {
        fs.mkdirSync('./files/temp/' + type + '/');
    }

    if (!fs.existsSync('./files/temp/' + type + '/' + project + '/')) {
        fs.mkdirSync('./files/temp/' + type + '/' + project + '/');
    }

    return false;
};

/*
|--------------------------------------------------------------------------
| Convert File
| Destination format is SCSS by default
|--------------------------------------------------------------------------
*/
var convert = function(file, destFormat) {
    if (destFormat === 'scss') {
        var lines = file.split(/^/m);

        for (var i = 0; i < lines.length; i++) {
            var line = lines[i];

            if (/^\..+\{\s?$/.test( line.trim() ) || /^\..+;$/.test( line.trim() )) {
                // Line is a mixin decloration
                if (/^\..+\{\s?$/.test( line.trim() )) {
                    line = line.replace(/@/g, '$');
                    line = line.replace(/^\./, '@mixin ');
                }

                // Line is a mixin call
                if (/^\..+;$/.test( line.trim() )) {
                    line = line.replace(/\.(.+;[\s]?)$/, '@include $1');
                }
            } else {
                line = line.replace(/@/g, '$');
            }

            lines[i] = line;
        }

        file = '// Generated by Parseless :: Developed by @rthor\n\n' + lines.join('');
    }

    return file;
};

/*
|--------------------------------------------------------------------------
| Read Directory
|--------------------------------------------------------------------------
*/
var directory = fs.readdirSync('./files/uploads/less/'),
    date = Date.now(),
    type = 'scss',
    projectName = 'ParselessTest',
    projectFolder = projectName + '_' + date;

/*
|--------------------------------------------------------------------------
| Iterate over each file in directory
|--------------------------------------------------------------------------
*/
for (var i = 0; i < directory.length; i++) {
    var path = './files/uploads/less/' + directory[i],
        newName = directory[i].replace(/(\.less)$/g, '.' + type),
        newPath = './files/temp/' + type + '/' + projectFolder + '/' + newName,
        file = convert(fs.readFileSync(path, 'utf8'), type);

        zip.file(newName, file);

    if (!directoryError(projectFolder, type)) {
        fs.writeFileSync(newPath, file, 'utf8');
    } else {
        console.log( 'There was an error...' );
    }
}

/*
|--------------------------------------------------------------------------
| Zip Folder
|--------------------------------------------------------------------------
*/
var data = zip.generate({base64:false,compression:'DEFLATE'});
fs.writeFileSync('./files/downloads/' + projectName + '_' + date + '_' + type + '.zip', data, 'binary');